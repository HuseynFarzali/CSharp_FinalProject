using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MarketApplication.Data.Concrete.Models
{
    /// <class name="SaleItem">
    /// Class that encapsulates the information of which product is bought and how many of them is bought 
    /// </class>
    public class SaleItem
    {
        /// <summary>
        /// Used for auto-generating ID values for each sale-item (implemented internally, not by user)
        /// </summary>
        private static int counter = 0;


        /// <summary>
        /// Properties of each sale-item adds additional information about itself. This information consist of unique ID value(generated by ctor), Product(object type of Product), BoughtCount(integer representing how many of the 'Product' is bought)
        /// </summary>
        #region Properties
        public int ID { get; set; }
        public Product Product { get; set; }
        public int BoughtCount { get; set; }
        #endregion

        #region Constructors
        /// <summary>
        /// Simple Constructor that prompts the user for all necessary information about the sale-item
        /// </summary>
        /// <param name="product">Product type parameter that represents which type of product is bought.</param>
        /// <param name="boughtCount">Integer that represents how many of the 'Product' is wanted to be bought</param>
        /// <exception cref="ArgumentNullException">Thrown to show that <paramref name="product"/> is null</exception>
        /// <exception cref="ArgumentException">Thrown to show that <paramref name="boughtCount"/> is more than the quantity of product that exists in the market storage</exception>
        public SaleItem(Product product, int boughtCount)
        {
            if (product == null)
                throw new ArgumentException("Given product cannot be null to be capsulated as a part of sale-item.");
            if (product.Quantity < boughtCount || boughtCount < 0)
                throw new ArgumentException($"Cannot make a sale-item of {boughtCount} {product.Name} which {product.Quantity} of it exist in the storage.");

            Product = product;
            BoughtCount = boughtCount;

            ID = counter++;
        }
        #endregion

        #region Methods
        /// <summary>
        /// A simple and informative method that gives information about a product in a single string. Not available for a user, but for the developer.
        /// </summary>
        /// <returns>String that contains all the information about the sale-item</returns>
        public string GetCode() => $"[p:{Product.Name}|bc:{BoughtCount}]#{ID}]";
        #endregion
    }
}
